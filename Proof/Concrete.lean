import Mathlib
import Proof.TileArea

-- #eval (canon_cor_rot Cor.tl [ Piece.treePiece 5 2 0])

-- #check Piece.treePiece

-- #eval (List.finRange 7).flatMap (fun i => List.map (fun j => Piece.treePiece i j 0)  (List.finRange 4))


/-
partial def fn_fix (xss : List (List Piece)) : List (List Piece) :=
  let l := fn xss
  if l == xss then xss else (fn_fix l)


def plist : List (List Piece) := (fn_fix (List.map (· :: []) init))

#eval (List.length plist) -- 16

partial def num_iters (xss : List (List Piece)) :  ℕ :=
  let l := fn xss
  if l == xss then (0:ℕ) else (1:ℕ) + (num_iters l)

#eval (num_iters (List.map (· :: []) init)) --3785
-/

-- #eval plist = fn plist
noncomputable def vol := MeasureTheory.volume ∘ getTiles

theorem vol_cors (ps : List Piece) : vol ps =
    vol (canon_cor_rot Cor.bl ps) / 4 +
    vol (canon_cor_rot Cor.br ps) / 4 +
    vol (canon_cor_rot Cor.tl ps) / 4 +
    vol (canon_cor_rot Cor.tr ps) / 4 := by
    rw [vol,Function.comp_apply]
    nth_rw 1 [vol_corners_sorted]
    simp

theorem vol_full' : vol [Piece.fullPiece] = 1 := by
  simp [getTiles,getTile,vol_usq,vol]

theorem vol_empty' : vol [] = 0 := by
  simp [getTiles,getTile,vol]

def init : List (List Piece) := (List.finRange 7).flatMap (fun i => (List.finRange 4).map (fun j => [Piece.treePiece i j 0])  )

def all_pieces_needed_by (xss : List (List Piece)) : List (List Piece) :=
  (List.mergeSort (xss ++ xss.flatMap
    (fun xs => List.map (fun r => canon_cor_rot r xs)
                        [Cor.bl,Cor.br,Cor.tl,Cor.tr]))
     (· ≤ · )).dedup

def plist : List (List Piece) := Nat.iterate all_pieces_needed_by 17 (init)

theorem plist_cont_all : plist = all_pieces_needed_by plist := by
  -- decide -- After unfolding the instance 'instDecidableEqList', reduction got stuck at the 'Decidable' instance
            -- plist.hasDecEq (all_pieces_needed_by plist)
  native_decide
#eval (plist.length) -- 3785

def concretePieceMap (xss : List (List Piece)) : List (List Piece × List (List Piece))  :=
  xss.map (fun xs => (xs, List.map (fun r => canon_cor_rot r xs)
                        [Cor.bl,Cor.br,Cor.tl,Cor.tr]))


theorem ps_szs : init.map vol = [105187607728740402443028874590589271175727417984243041331444253942248364837950737123031018215335541841177518/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 6414096097425050620500764171446769897743493331559233629508200333423987240533524436757176775373463909744921363/14040198496569921098110450890605625160855820057203888770200008143743666723979734760755150490956943003574529488, 1176698522459228389099830819267655834622649884875353804796033584561545681626359435628767068906115966430851873/3510049624142480274527612722651406290213955014300972192550002035935916680994933690188787622739235750893632372, 0, 42284834655695127325062859536576439763737670748317991543196353411630489597197835666648107752420706453507719884/74588554513027705833711770356342383667046544053895659091687543263638229471142340916511736983208759706489687905, 736343266571063881623570783362816978314866472318007127181049860729231335817598303978994808300953469180994956641/1193416872208443293339388325701478138672744704862330545467000692218211671538277454664187791731340155303835006480, 430508607342923240396615459602561656085901916611003856909524500219813256808719072877455150638297429801971077/501435660591782896361087531807343755744850716328710313221428862276559525856419098598398231819890821556233196, 420750430914961609772115498362357084702909671936972165325777015768993459351802948492124072861342167364710072/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 25612890656319030766360156938388263906837250638489325028184557498360800304211824161052872150362113755003904457/149177109026055411667423540712684767334093088107791318183375086527276458942284681833023473966417519412979375810, 323967108708429854101207238363757798575023426854071961394934730552913718188781187827099820083197152580962656077/596708436104221646669694162850739069336372352431165272733500346109105835769138727332093895865670077651917503240, 4931201186158886148615443017275731652431413483711915532303287562933183263851332100804582310589566272587491623/7020099248284960549055225445302812580427910028601944385100004071871833361989867380377575245478471501787264744, 755948091544266779327715320905298749919740212938381639470256568792552222274556487136642996044773799066141801/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 1, 1/2, 2536547679753422136345732885106290781940312914416746096203737500009855636085193105273255012857421257559598339/3510049624142480274527612722651406290213955014300972192550002035935916680994933690188787622739235750893632372, 3390303731247983503189902887825574898064532479805707071627174058253778351435298488210604791194368713480354159/3510049624142480274527612722651406290213955014300972192550002035935916680994933690188787622739235750893632372, 25612890656319030766360156938388263906837250638489325028184557498360800304211824161052872150362113755003904457/149177109026055411667423540712684767334093088107791318183375086527276458942284681833023473966417519412979375810, 323967108708429854101207238363757798575023426854071961394934730552913718188781187827099820083197152580962656077/596708436104221646669694162850739069336372352431165272733500346109105835769138727332093895865670077651917503240, 4931201186158886148615443017275731652431413483711915532303287562933183263851332100804582310589566272587491623/7020099248284960549055225445302812580427910028601944385100004071871833361989867380377575245478471501787264744, 755948091544266779327715320905298749919740212938381639470256568792552222274556487136642996044773799066141801/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 42284834655695127325062859536576439763737670748317991543196353411630489597197835666648107752420706453507719884/74588554513027705833711770356342383667046544053895659091687543263638229471142340916511736983208759706489687905, 736343266571063881623570783362816978314866472318007127181049860729231335817598303978994808300953469180994956641/1193416872208443293339388325701478138672744704862330545467000692218211671538277454664187791731340155303835006480, 430508607342923240396615459602561656085901916611003856909524500219813256808719072877455150638297429801971077/501435660591782896361087531807343755744850716328710313221428862276559525856419098598398231819890821556233196, 420750430914961609772115498362357084702909671936972165325777015768993459351802948492124072861342167364710072/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 105187607728740402443028874590589271175727417984243041331444253942248364837950737123031018215335541841177518/877512406035620068631903180662851572553488753575243048137500508983979170248733422547196905684808937723408093, 6414096097425050620500764171446769897743493331559233629508200333423987240533524436757176775373463909744921363/14040198496569921098110450890605625160855820057203888770200008143743666723979734760755150490956943003574529488, 1176698522459228389099830819267655834622649884875353804796033584561545681626359435628767068906115966430851873/3510049624142480274527612722651406290213955014300972192550002035935916680994933690188787622739235750893632372, 0] := by
  sorry

-- #eval (concretePieceMap plist) -- 3785
-- #eval plist
-- def pl2

-- #eval (fn (List.map (· :: []) init))

-- #eval (fn_fix (List.map (· :: []) init))
-- #eval (fn_fix (List.map (· :: []) init))

-- #check (fn_fix init)

-- #eval (fn [init])
/-
def x3 := [
 [],
 [Piece.treePiece 0 0 3]]
def x2 := [
 [],
 [Piece.treePiece 0 0 3]]
-/
